* Key Bindings
** Switch keys for better Dvorak compatibility
#+BEGIN_SRC emacs-lisp
(keyboard-translate ?\C-x ?\C-h)	;x for eXplain
(keyboard-translate ?\C-h ?\C-x)	;h for hang on, I have more input
(keyboard-translate ?\C-t ?\C-f)	;f for Flip two letters
(keyboard-translate ?\C-f ?\C-t)	;t for Toward the end of the line/file
(define-key key-translation-map (kbd "C-M-f") (kbd "C-M-t"))
(define-key key-translation-map (kbd "C-M-t") (kbd "C-M-f"))
(define-key key-translation-map (kbd "C-M-S-f") (kbd "C-M-S-t"))
(define-key key-translation-map (kbd "C-M-S-t") (kbd "C-M-S-f"))
(define-key key-translation-map (kbd "M-t") (kbd "M-f"))
(define-key key-translation-map (kbd "M-f") (kbd "M-t"))
(define-key key-translation-map (kbd "M-F") (kbd "M-T"))
(define-key key-translation-map (kbd "M-T") (kbd "M-F"))
#+END_SRC

** Global key bindings
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda () (local-set-key (kbd "C-,")
                                      (lambda () (interactive)
                                        (other-window -1)))))

  (global-set-key (kbd "<f5>") (lambda () (interactive) (revert-buffer nil t)))
  (global-set-key (kbd "M-p") 'backward-paragraph)
  (global-set-key (kbd "M-n") 'forward-paragraph)

  (global-set-key (kbd "M-,")
                  (lambda () (interactive) (other-window -1)))
  (global-set-key (kbd "M-.") 'other-window)
  (global-set-key (kbd "C-,")
                  (lambda () (interactive) (other-window -1)))
  (global-set-key (kbd "C-.") 'other-window)

  (global-set-key (kbd "C-z") 'zap-to-char)
  (global-set-key (kbd "C-x p") 'pop-to-mark-command)
  (global-set-key (kbd "C-x b") 'bookmark-jump)
  (global-set-key (kbd "C-x w") 'eww)
  (global-set-key (kbd "M-r") 'query-replace-regexp)
  (global-set-key (kbd "C-M-r") 'replace-regexp)
  (global-set-key (kbd "C-M-d") 'kill-sexp)
  (global-set-key (kbd "C-'") 'semantic-ia-show-summary)
  (global-set-key (kbd "C-h o") 'man)
#+END_SRC

Swap undo and universal-argument. C-u is in too good of a position to be wasted on universal-argument.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-u") 'undo)
(global-set-key (kbd "C-/") 'universal-argument)
#+END_SRC

** Keybindings for external packages
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x m") 'mu4e)
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-r") 'ace-window)
(global-set-key (kbd "M-m") 'er/expand-region)
(global-set-key (kbd "C-x f") 'anchored-transpose)
(global-set-key (kbd "C-x C-o") 'shrink-whitespace)
(global-set-key (kbd "C-M-s") 'helm-do-ag-project-root)
(global-set-key (kbd "C-;") 'whole-line-or-region-comment-dwim)

#+END_SRC

*** avy
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-s") 'avy-goto-subword-1)
(global-set-key (kbd "M-g M-g") 'avy-goto-line)
(global-set-key (kbd "M-g g") 'avy-goto-line)
#+END_SRC

*** deft
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x d") 'deft)
(global-set-key (kbd "C-c n") 'deft-new-file)
#+END_SRC

** helm
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x C-b") 'helm-mini)
(global-set-key (kbd "C-x C-n") 'helm-mini)
(global-set-key (kbd "C-h a") 'helm-apropos)
(global-set-key (kbd "C-h x") 'helm-google-suggest)
#+END_SRC

*** corral
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-9") 'corral-parentheses-backward)
(global-set-key (kbd "M-0") 'corral-parentheses-forward)
(global-set-key (kbd "M-[") 'corral-brackets-backward)
(global-set-key (kbd "M-]") 'corral-brackets-forward)
(global-set-key (kbd "M-{") 'corral-braces-backward)
(global-set-key (kbd "M-}") 'corral-braces-forward)
(global-set-key (kbd "M-\"") 'corral-double-quotes-backward)
(global-set-key (kbd "M-'") 'corral-single-quotes-backward)
#+END_SRC

** Keybindings for custom defined functions
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-return>") 'open-next-line)
(global-set-key (kbd "M-RET") 'open-next-line)
(global-set-key (kbd "C-o") 'open-next-line) ;like vi o
(global-set-key (kbd "C-x C-r") 'find-file-sudo)
(global-set-key (kbd "M-o") 'open-previous-line) ;like vi O
(global-set-key (kbd "<f8>") 'run-async-script)
#+END_SRC

* Settings
** Package Management
Load and activate packages before using them.
#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

Use melpa as package repository.
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
#+END_SRC
** Appearance
*** Frame title
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook
          (lambda () (setq frame-title-format 'mode-line-format)))
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
(setq favorite-themes
      '(grandshell tronesque cyberpunk afternoon sanityinc-tomorrow-bright
                   deeper-blue material sanityinc-tomorrow-blue soothe))
(load-theme 'noctilux t)

(set-cursor-color "white")
(set-face-attribute 'vertical-border
                    nil
                    :foreground "#4d4d4d")
#+END_SRC

*** Fringes
#+BEGIN_SRC emacs-lisp
(fringe-mode '(4 . 0))
#+END_SRC

** Editor behavior
*** Autosave
Set autosave directory so that all the autosaves are in one place, and not all over the filesystem.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "/home/nivekuil/.emacs.d/backup")))
(setq auto-save-list-file-prefix "/home/nivekuil/.emacs.d/autosave/")
(setq auto-save-file-name-transforms
      `((".*" , "/home/nivekuil/.emacs.d/autosave/" t)))
#+END_SRC

*** Dired
When multiple dired buffers are open, dired should assume that file operations should be directed to the path in the other dired buffer.
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target nil)
#+END_SRC
*** Fill column
fill commands should create rows up to to 78 characters long.
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 78)
#+END_SRC

*** Scrolling
Make scrolling behave smoothly.  Note that scrolling does not work correctly with hl-line-mode after cursor goes to the bottom of the buffer.
#+BEGIN_SRC emacs-lisp
(setq scroll-margin 7
      scroll-conservatively 10000)
#+END_SRC

Change how many lines mouse wheel scrolls by - 1 line at a time with no modifiers.
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 3) ((control) . 8)))
#+END_SRC

*** Yanking (pasting)
If we copy something from outside emacs, save it in the kill ring so it doesn't get lost after a kill.
#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC

*** Increase garbage collection memory threshold
By default Emacs GC'd every .76MB allocated, which is far too aggressive for a modern machine.  Raise this to a much bigger number.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

*** Increase undo limit
#+BEGIN_SRC emacs-lisp
(setq undo-limit 800000)
(setq undo-strong-limit 1200000)
#+END_SRC

** Built-in minor modes
#+BEGIN_SRC emacs-lisp
;; Use subword mode in prog mode to move by camelCase.
(add-hook 'prog-mode-hook 'subword-mode)

;; use winner-mode (C-c left to undo window changes)
(winner-mode t)

;; use semantic
(semantic-mode t)

;; use hl line mode in dired and speedbar
(add-hook 'dired-mode-hook 'hl-line-mode)
(add-hook 'speedbar-mode-hook 'hl-line-mode)

;; use electric pair mode
(electric-pair-mode t)

;; use mouse avoidance mode
(setq mouse-avoidance-mode 'banish)

;; tab inserts spaces only
(setq-default indent-tabs-mode nil)

;; use auto-revert-mode for log files to update the output automatically
(add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-mode))
#+END_SRC

* Custom Functions
** Commands
*** Run current buffer in interpreter asynchronously
#+BEGIN_SRC emacs-lisp
(defun run-async-script ()
  (interactive)
  (cond ((equal (file-name-extension buffer-file-name) "py")
         (async-shell-command (concat "python " buffer-file-name)))))
#+END_SRC

*** file-file-sudo
#+BEGIN_SRC emacs-lisp
(defun find-file-sudo ()
  "Reopen the current file as root user."
  (interactive)
  (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name)))
#+END_SRC

*** open-next-line
Behave like vi's o command
Binding: C-o, C-RET, M-RET
#+BEGIN_SRC emacs-lisp
(defun open-next-line ()
  "Open a new line after the current one."
  (interactive)
  (end-of-line) (open-line 1) (forward-line) (indent-according-to-mode))
#+END_SRC

*** open-previous-line
Behave like vi's O command
Binding: M-o
#+BEGIN_SRC emacs-lisp
(defun open-previous-line ()
  "Open a new line before the current one."
  (interactive)
  (beginning-of-line) (open-line 1) (indent-according-to-mode))
#+END_SRC

*** mark-this-line
Binding: M-m
#+BEGIN_SRC emacs-lisp
(defun mark-this-line ()
  "Mark the current line from indentation to end, leaving cursor at end."
  (interactive)
  (back-to-indentation) (set-mark-command nil) (end-of-line))
#+END_SRC

*** correct-exponent-formatting-in-region
#+BEGIN_SRC emacs-lisp
  (defun correct-exponent-formatting-in-region (start end)
    "Corrects formatting of exponents from copied text.
  When yanking formatted text, the formatting of exponents will be lost,
  appearing as regular numbers instead.  This function adds carets to properly
  denote that they are exponents, including exponents of parenthetical
  expressions.  This function assumes that the input variable is never an
  exponent itself."
    (interactive "*r")
    (save-excursion
      (save-restriction
        (let ((character (read-string "Enter variable to add carets around: ")))
          (narrow-to-region start end)
          (goto-char (point-min))
          (while (re-search-forward (concat "[" character ")]") nil t)
            (when (looking-at-p "[[:digit:]]") (insert "^")))))))
#+END_SRC

* Packages
** Ace window
#+BEGIN_SRC emacs-lisp
(setq aw-background t)
#+END_SRC

** Auto indent mode
#+BEGIN_SRC emacs-lisp
  ;; use auto indent mode
  (auto-indent-global-mode t)
  (add-to-list 'auto-indent-known-indent-level-variables
               'js-indent-level)
  (add-to-list 'auto-indent-known-indent-level-variables
               'web-mode-markup-indent-offset)
  (setq auto-indent-assign-indent-level 2)

#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
(setq avy-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
(setq avy-style 'at-full)
(setq avy-background nil)
#+END_SRC

** Column enforce mode
Use column enforce mode to mark text past column 80.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'column-enforce-mode)
#+END_SRC

** Company mode
Use company mode for text and code completion.
#+BEGIN_SRC emacs-lisp
(global-company-mode)
(add-to-list 'company-backends 'company-anaconda)
(setq company-idle-delay 0.15)
#+END_SRC

The dabbrev backends should only look for candidates in buffers with the same major mode.
#+BEGIN_SRC emacs-lisp
(setq company-dabbrev-other-buffers t)
(setq company-dabbrev-code-other-buffers t)
#+END_SRC

Autocomplete should preserve the original case as much as possible.
#+BEGIN_SRC emacs-lisp
(setq company-dabbrev-downcase nil)
(setq company-dabbrev-ignore-case nil)
#+END_SRC

** Corral
#+BEGIN_SRC emacs-lisp
(setq corral-preserve-point t)
(setq corral-syntax-entries '((?# "_")
                              (?* "_")
                              (?- "_")))
#+END_SRC

** Deft
#+BEGIN_SRC emacs-lisp
(setq deft-directory "/home/nivekuil/docs/deft/")
(setq deft-extension "org")
(setq deft-default-extension "org")
(setq deft-text-mode 'org-mode)
(setq deft-auto-save-interval 0)
#+END_SRC

** Flycheck
Use flycheck for syntax checking.
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
(helm-mode t)
#+END_SRC
*** Swap <tab> and C-z in helm buffers
#+BEGIN_SRC emacs-lisp
(define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
(define-key helm-map (kbd "C-z") 'helm-select-action)
#+END_SRC

*** Make helm buffers appear on the bottom half of the window
#+BEGIN_SRC emacs-lisp
(setq helm-split-window-in-side-p t)
(setq helm-split-window-default-side 'below)
#+END_SRC

*** Use fuzzy matching with helm-apropos
#+BEGIN_SRC emacs-lisp
(setq helm-apropos-fuzzy-match t)
#+END_SRC

** Helm-ag
#+BEGIN_SRC emacs-lisp
(setq helm-ag-fuzzy-match t)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(setq magit-last-seen-setup-instructions "1.4.0")
#+END_SRC

** mu4e
mu4e is not part of an Emacs package management system, so we have to require it manually.
#+BEGIN_SRC emacs-lisp
  (require 'mu4e)
  (setq mu4e-get-mail-command "offlineimap")
  (setq mu4e-headers-date-format "%b %d")
  (setq mu4e-headers-time-format "%I:%M %p")
  (setq mu4e-headers-fields '((:subject . 57)
                              (:from . 23)
                              (:human-date . 9)))
#+END_SRC

Update mailboxes every hour.
#+BEGIN_SRC emacs-lisp
(setq mu4e-update-interval 3600)
#+END_SRC

Use gmail as default mailbox.
#+BEGIN_SRC emacs-lisp
  (setq mu4e-maildir       "~/Maildir"   ;; top-level Maildir
        mu4e-sent-folder   "/gmail/sent"       ;; folder for sent messages
        mu4e-drafts-folder "/gmail/drafts"     ;; unfinished messages
        mu4e-trash-folder  "/gmail/trash"      ;; trashed messages
        mu4e-refile-folder "/gmail/archive")   ;; saved messages

#+END_SRC

Show images in emails.
#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-images t)
#+END_SRC

Gmail and offlineimap leads to duplicate emails showing up in search filters since that's the way labels/virtual folders in Gmail are represented, so skip them.
#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-skip-duplicates t)
#+END_SRC

Use =mu4e-shr2text= found in the =mu4e-contrib= package to display rich text messages.
#+BEGIN_SRC emacs-lisp
(require 'mu4e-contrib)
(setq mu4e-html2text-command 'mu4e-shr2text)
#+END_SRC

Settings for sending mail using TLS encryption.  Use ~/.authinfo (or ~/.authinfo.gpg) for credentials.
#+BEGIN_SRC emacs-lisp
  (require 'smtpmail)
  (setq user-mail-address "kevin@nivekuil.com"
        send-mail-function 'smtpmail-send-it
        smtpmail-smtp-server "smtp.zoho.com"
        smtpmail-smtp-service 587)      ;TLS port
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(projectile-global-mode t)
(setq projectile-mode-line '(:eval (format " [%s]" (projectile-project-name))))
#+END_SRC

** Smart mode line
Use smart mode line, and don't display most minor mode lighters from the mode line.
#+BEGIN_SRC emacs-lisp
(sml/setup)
(setq rm-blacklist '(" ,"               ; Subword mode
                     " 80col"           ; Column enforce mode
                     " company"         ; Company mode
                     " Fly"             ; Flyspell mode
                     " Helm"            ; Helm mode
                     " AI"              ; Auto indent mode
                     " MRev"            ; Magit auto revert mode
                     " yas"             ; Yasnippet
                     " WLR"             ; Whole line or region mode
                     " FlyC-"           ; Flycheck (inactive)
                     " Ind"             ; Org indent mode
                     " wb"              ; Ws butler
                     " Abbrev"))
#+END_SRC

** Spaceline
#+BEGIN_SRC emacs-lisp
(require 'spaceline-config)
(spaceline-emacs-theme)
#+END_SRC
** Swiper
Backspace should not end swiper.
#+BEGIN_SRC emacs-lisp
(setq ivy-on-del-error-function nil)
#+END_SRC

** Whole line or region
Use whole line or region so C-w and M-w without an active mark kills the line.
#+BEGIN_SRC emacs-lisp
(whole-line-or-region-mode t)
#+END_SRC

** Ws butler
Automatically and non-disruptively clean up whitespace on save.
#+BEGIN_SRC emacs-lisp
(ws-butler-global-mode t)
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
;; use yasnippet
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
(yas-global-mode t) ;; Activate global mode before defining keys
#+END_SRC

Yasnippet blocks shell tab completion, so disable it in comint and term modes.
#+BEGIN_SRC emacs-lisp
(add-hook 'comint-mode-hook (lambda () (yas-minor-mode -1)))
(add-hook 'term-mode-hook (lambda () (yas-minor-mode -1)))
#+END_SRC

** sr-speedbar
#+BEGIN_SRC emacs-lisp
  (setq sr-speedbar-width 25)
  (setq sr-speedbar-default-width 25)
  (setq sr-speedbar-right-side nil)
  (add-hook 'after-init-hook
            (lambda () (speedbar-set-timer 1)))

#+END_SRC

* Major Mode Settings
** Assembly
Configuration for SPARC assembly. Use ! as the comment char and only use tabs.
#+BEGIN_SRC emacs-lisp
(setq asm-comment-char 33)
(setq asm-mode-hook
      (lambda ()
        (setq indent-tabs-mode t)
        (add-hook 'before-save-hook
                  (lambda () (tabify (point-min) (point-max))) nil t)))
#+END_SRC

** Comint
#+BEGIN_SRC emacs-lisp
(add-hook 'comint-mode-hook (lambda ()
                              (set (make-local-variable 'scroll-margin) 0)))
(setq shell-file-name "bash")

(setq comint-prompt-read-only t)
#+END_SRC

** Eww
#+BEGIN_SRC emacs-lisp
(eval-after-load "eww"
  '(progn (define-key eww-mode-map "n" 'next-line)
          (define-key eww-mode-map "m" 'eww-follow-link)
          (define-key eww-mode-map "p" 'previous-line)
          (define-key eww-mode-map "N" 'eww-next-url)
          (define-key eww-mode-map "P" 'eww-previou1rs-url)))
#+END_SRC

** ERC
Autojoin channels when ERC starts.
#+BEGIN_SRC emacs-lisp
(setq erc-autojoin-channels-alist
      '(("freenode.net" "#emacs" "#archlinux")))
#+END_SRC

Highlight nicknames.
#+BEGIN_SRC emacs-lisp
(add-hook 'erc-mode-hook 'erc-hl-nicks-mode)
#+END_SRC

Hide those annoying join/quit messages.
#+BEGIN_SRC emacs-lisp
(setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC
** Help
#+BEGIN_SRC emacs-lisp
(add-hook 'help-mode-hook 'visual-line-mode)
#+END_SRC

** Org
Use visual line mode to wrap lines in org mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)
(setq org-latex-create-formula-image-program 'imagemagick)
#+END_SRC

Org project settings for publishing my website, converting org files to html for jekyll.
#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
      '(
  ("org-website"
          ;; Path to your org files.
          :base-directory "~/code/nivekuil.github.io/_org/"
          :base-extension "org"

          ;; Path to your Jekyll project.
          :publishing-directory "~/code/nivekuil.github.io/"
          :recursive t
          :publishing-function org-html-publish-to-html
          :headline-levels 4
          :html-extension "html"
          :body-only t
    )

    ("org-website-static"
          :base-directory "~/code/nivekuil.github.io/_org/"
          :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
          :publishing-directory "~/code/nivekuil.github.io/"
          :recursive t
          :publishing-function org-publish-attachment)

    ("website" :components
     ("org-website-static" "org-website"))
))
#+END_SRC

Editing source code blocks should happen in the same window.  The edit session should end after saving the org-src buffer (TODO).
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

Eval code blocks without prompting for confirmation.  It's unlikely that this will ever cause a security threat.
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Don't indent the content of src blocks.
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)
#+END_SRC

Show literal link markup instead of styling links.
#+BEGIN_SRC emacs-lisp
(setq org-descriptive-links nil)
#+END_SRC

** Javascript/HTML/CSS
Use js2-mode for editing .js files.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.jsx$" . js2-mode))
#+END_SRC

JSON is a subset of YAML, so use yaml-mode to edit json files.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.json$" . yaml-mode))
#+END_SRC

** Python
Use anaconda for IDE features.
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook
          (lambda () (setq auto-indent-assign-indent-level 4)))
#+END_SRC

** Term
Set scroll margin in terminal to 0.
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook (lambda ()
                            (set (make-local-variable 'scroll-margin) 0)))
#+END_SRC

** Web
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.scss?\\'" . web-mode))
#+END_SRC

** wsd-mode
Major mode for editing [[https://www.websequencediagrams.com/][web sequence diagrams]].
#+BEGIN_SRC emacs-lisp
  (setq wsd-style "Green Earth")
#+END_SRC
* Other
** Startup
#+BEGIN_SRC emacs-lisp
  (defun do-on-startup-graphical ()
    "Stuff to do after the init file is loaded."
    (other-window 1)
    (mu4e t)                              ;Start mu4e in background
    (split-window-horizontally)
    (server-start))

  (defun do-on-startup-terminal ()
    (split-window-horizontally))

  (if (display-graphic-p) (do-on-startup-graphical)
    (do-on-startup-terminal))

#+END_SRC
