* Custom Variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(auto-indent-blank-lines-on-move nil)
 '(auto-save-interval 0)
 '(auto-save-timeout 10)
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(custom-safe-themes
   (quote
    ("cd540cb356cb169fa1493791bd4cbb183c5ad1c672b8d1be7b23e5e8c8178991" "bc40f613df8e0d8f31c5eb3380b61f587e1b5bc439212e03d4ea44b26b4f408a" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "c74e83f8aa4c78a121b52146eadb792c9facc5b1f02c917e3dbb454fca931223" "c5a044ba03d43a725bd79700087dea813abcb6beb6be08c7eb3303ed90782482" "6a37be365d1d95fad2f4d185e51928c789ef7a4ccf17e7ca13ad63a8bf5b922f" "756597b162f1be60a12dbd52bab71d40d6a2845a3e3c2584c6573ee9c332a66e" default)))
 '(electric-pair-mode t)
 '(fringe-mode 0 nil (fringe))
 '(inhibit-startup-screen t)
 '(menu-bar-mode nil)
 '(python-indent-guess-indent-offset nil)
 '(scroll-bar-mode nil)
 '(sml/position-percentage-format "")
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Ubuntu Mono" :foundry "unknown" :slant normal :weight normal :height 151 :width normal)))))
#+END_SRC
* Key Bindings
** Switch keys for better Dvorak compatibility
#+BEGIN_SRC emacs-lisp
(keyboard-translate ?\C-x ?\C-h)        ;x for eXplain
(keyboard-translate ?\C-h ?\C-x)        ;h for hang on, I have more input
(keyboard-translate ?\C-t ?\C-f)        ;f for Flip two letters
(keyboard-translate ?\C-f ?\C-t)        ;t for Toward the end of the line/file
(define-key key-translation-map (kbd "C-M-f") (kbd "C-M-t"))
(define-key key-translation-map (kbd "C-M-t") (kbd "C-M-f"))
(define-key key-translation-map (kbd "C-M-S-f") (kbd "C-M-S-t"))
(define-key key-translation-map (kbd "C-M-S-t") (kbd "C-M-S-f"))
(define-key key-translation-map (kbd "M-t") (kbd "M-f"))
(define-key key-translation-map (kbd "M-f") (kbd "M-t"))
(define-key key-translation-map (kbd "M-F") (kbd "M-T"))
(define-key key-translation-map (kbd "M-T") (kbd "M-F"))
#+END_SRC

** Global key bindings
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook (lambda ()
                            (local-set-key (kbd "M-p") 'previous-line)
                            (local-set-key (kbd "M-n") 'next-line)))
(add-hook 'org-mode-hook (lambda ()
                           (local-set-key (kbd "M-p") 'previous-line)
                           (local-set-key (kbd "M-n") 'next-line)))


(global-set-key (kbd "M-m") 'mark-this-line)

(global-set-key (kbd "C-o") 'open-next-line) ;like vi o
(global-set-key (kbd "M-o") 'open-previous-line) ;like vi O

(global-set-key (kbd "C-,") (lambda () (interactive) (other-window -1)))
(global-set-key (kbd "C-.") 'other-window)
(global-set-key (kbd "C-u") 'undo)
(global-set-key (kbd "C-/") 'universal-argument)
(global-set-key (kbd "C-z") 'zap-to-char)
(global-set-key (kbd "C-x p") 'pop-to-mark-command)
(global-set-key (kbd "C-h x") 'helm-google-suggest)
(global-set-key (kbd "M-s") 'query-replace)
(global-set-key (kbd "C-M-s") 'replace-regexp)

#+END_SRC

** Keybindings for external packages
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'helm-swoop)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x m") 'helm-emms)
  (global-set-key (kbd "M-r") 'ace-jump-word-mode)
  (global-set-key (kbd "C-r") 'ace-window)
  ;; helm
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x C-b") 'helm-mini)
  (global-set-key (kbd "C-h a") 'helm-apropos)

  ;; Keybindings for custom defined functions
  (global-set-key (kbd "M-9") 'insert-parentheses-backward)
  (global-set-key (kbd "M-0") 'insert-parentheses-forward)
#+END_SRC

* Settings
** Package Management
#+BEGIN_SRC emacs-lisp
;; Load and activate packages before using them.
(package-initialize)

;; Use melpa package repository.
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
#+END_SRC
** Autosave
#+BEGIN_SRC emacs-lisp
;; Set autosave directory so emacs doesn't leave autosave files everywhere.
(setq backup-directory-alist `(("." . "~/.emacs.d/backup"))
      auto-save-list-file-prefix "~/.emacs.d/autosave/"
      auto-save-file-name-transforms `((".*" , "~/.emacs.d/autosave/" t)))
#+END_SRC
** Appearance
#+BEGIN_SRC emacs-lisp
  ;; Set the theme.
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (setq favorite-themes
        '(bubbleberry material afternoon tronesque grandshell
 soothe cyberpunk))
(load-theme 'cyberpunk t)
  ;; (load-theme
  ;;  (nth (random (1- (1+ (length favorite-themes)))) favorite-themes)
  ;;  t)
  ;; (set-cursor-color "lightgreen")
#+END_SRC
** Editor behavior
#+BEGIN_SRC emacs-lisp
;; smooth scrolling
;; Note that scroll-conservatively does not work correctly with hl line mode
;; when at bottom of buffer
(setq scroll-margin 7
      scroll-conservatively 10000)
;; mouse scroll amount
(setq mouse-wheel-scroll-amount '(1 ((shift) . 3) ((control) . 8)))
;; tab inserts spaces
(setq-default indent-tabs-mode nil)
#+END_SRC

* Custom Functions
** open-next-line
#+BEGIN_SRC emacs-lisp
;; Behave like vi's o command
;; Binding: C-o
(defun open-next-line ()
  "Open a new line after the current one."
  (interactive)
  (end-of-line) (open-line 1) (forward-line) (indent-according-to-mode))
#+END_SRC

** open-previous-line
#+BEGIN_SRC emacs-lisp
;; Behave like vi's O command
;; Binding: M-o
(defun open-previous-line ()
  "Open a new line before the current one."
  (interactive)
  (beginning-of-line) (open-line 1) (indent-according-to-mode))
#+END_SRC

** mark-this-line
#+BEGIN_SRC emacs-lisp
;; Binding: M-m
(defun mark-this-line ()
  "Mark the current line from indentation to end, leaving cursor at end."
  (interactive)
  (back-to-indentation) (set-mark-command nil) (end-of-line))
#+END_SRC

** insert-parentheses-backward
#+BEGIN_SRC emacs-lisp
(defun insert-parentheses-backward ()
  "Insert parentheses around the sexp near point. Move parentheses backward by
        sexp if used repeatedly. Keycode 40 = (, 41 = )"
  (interactive)
  (cond ((string-match-p "\\\w" (char-to-string (char-after)))
         (forward-char) (insert-parentheses-backward))
        ((equal (char-before) 41)
         (backward-sexp) (insert-parentheses-backward))
        ((equal (char-after) 40)
         (if (equal (char-before) 40)
             (list (backward-char) (insert-parentheses 1))
           (delete-char 1) (backward-sexp) (insert-char 40) (backward-char)))
        ((equal (char-before) 40)
         (insert-parentheses 1) (backward-char))
        ((string-match-p "\\^_\W" (char-to-string (char-before)))
         (insert-parentheses 1) (backward-char))
        ((string-match-p "\\^_\W" (char-to-string (char-after)))
         (forward-char) (insert-parentheses 1) (backward-char))
        (t (backward-sexp) (insert-parentheses 1) (backward-char))))
#+END_SRC
** insert-parentheses-forward
#+BEGIN_SRC emacs-lisp
(defun insert-parentheses-forward ()
  "Insert parentheses around the sexp around point. Move parentheses forward by
       sexp if used repeatedly. Keycode 40 = (, 41 = )"
  (interactive)
  (cond ((equal (char-before) 41)
         (if (equal (char-after) 41)
             (list (forward-char) (insert-parentheses-forward))
           (delete-char -1) (forward-sexp) (insert-char 41)))
        ((equal (char-after) 40)
         (forward-sexp) (insert-parentheses-forward))
        ((equal (char-before) 40)
         (insert-parentheses 1) (forward-sexp) (forward-char))
        ((string-match-p "\\^_\W" (char-to-string (char-before)))
         (insert-parentheses 1) (forward-sexp) (forward-char))
        ((string-match-p "\\^_\W" (char-to-string (char-after)))
         (backward-sexp) (insert-parentheses 1) (forward-sexp) (forward-char))
        (t (backward-sexp) (insert-parentheses 1)
           (forward-sexp) (forward-char))))
#+END_SRC

** correct-exponent-formatting-in-region
#+BEGIN_SRC emacs-lisp
(defun correct-exponent-formatting-in-region (start end)
  "When yanking formatted text, the formatting of exponents will be lost,
    appearing as regular numbers instead. This function adds carets to properly
   denote that they are exponents, including exponents of parenthetical
    expressions. This function assumes that the input variable is never an
  exponent itself."
  (interactive "*r")
  (save-excursion
    (save-restriction
      (let ((character (read-string "Enter variable to add carets around: ")))
        (narrow-to-region start end)
        (goto-char (point-min))
        (while (re-search-forward (concat "[" character ")]") nil t)
          (when (looking-at-p "[[:digit:]]") (insert "^")))))))
#+END_SRC

* Packages
** Ace jump mode
** Ace window
#+BEGIN_SRC emacs-lisp
(setq aw-background nil)
#+END_SRC

** Auto indent mode
#+BEGIN_SRC emacs-lisp
;; use auto indent mode
(auto-indent-global-mode 1)
(setq auto-indent-assign-indent-level 2)
#+END_SRC

** Column enforce mode
#+BEGIN_SRC emacs-lisp

;; Use column enforce mode to mark text past column 80.
(add-hook 'prog-mode-hook 'column-enforce-mode)
#+END_SRC

** Company mode
#+BEGIN_SRC emacs-lisp
;; use company-mode for text completion
(add-hook 'after-init-hook
          (lambda () (global-company-mode)
            (add-to-list 'company-backends 'company-anaconda))
          (setq company-idle-delay 0.3))
#+END_SRC

** EMMS
#+BEGIN_SRC emacs-lisp
(emms-all)
(emms-default-players)
#+END_SRC

*
** Flycheck
#+BEGIN_SRC emacs-lisp
;; Use flycheck for syntax checking.
(add-hook 'after-init-hook 'global-flycheck-mode) ;start with emacs
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
(helm-mode)
;; Swap <tab> and C-z
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
(define-key helm-map (kbd "C-z") 'helm-select-action)
;; make helm buffers always appear on the same window
(setq helm-split-window-default-side 'same)
#+END_SRC

** Helm swoop
#+BEGIN_SRC emacs-lisp
(setq helm-swoop-pre-input-function (lambda () "")) ;disable pre-input on swoop
#+END_SRC

** Neotree
#+BEGIN_SRC emacs-lisp
(setq neo-keymap-style 'concise)
#+END_SRC

** Smart mode line
#+BEGIN_SRC emacs-lisp
;; Use smart mode line.
(sml/setup)
(sml/apply-theme 'respectful)
(setq rm-blacklist '(" ,"
                     " 80col"           ;hide lighters from mode-line
                     " company"
                     " FlyC-"
                     " Helm"
                     " AI"
                     " yas"
                     " WLR"
                     " Abbrev"))
#+END_SRC

** Whole line or region
#+BEGIN_SRC emacs-lisp
;; use whole line or region so C-w and M-w without selection deletes
;; the line. When yanking, it places it as a line
(whole-line-or-region-mode 1)
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
;; use yasnippet
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
(yas-global-mode 1) ;; Activate global mode before defining keys
(add-hook 'term-mode-hook (lambda () (setq yas-dont-activate t)))
#+END_SRC

** RPG mode
#+BEGIN_SRC emacs-lisp
;; use rpg-mode
(add-to-list 'load-path "/home/nivekuil/code/rpg-mode/")
(require 'rpg-mode)
(rpg-mode)
#+END_SRC

* Mode Settings
** Built-in minor modes
#+BEGIN_SRC emacs-lisp

;; Use subword mode in programming languages to move by camelCase.
(add-hook 'prog-mode-hook 'subword-mode)

;; use winner-mode (C-c left to undo window changes)
(winner-mode 1)

;; use hl line mode in dired
(add-hook 'dired-mode-hook 'hl-line-mode)

;; use electric pair mode
(electric-pair-mode 1)

;; use mouse avoidance mode
(setq mouse-avoidance-mode 'banish)
#+END_SRC

** Major modes
*** Comint-mode (shell)
#+BEGIN_SRC emacs-lisp
(setq shell-file-name "bash"
      shell-command-switch "-ic")

(setq comint-prompt-read-only t)
#+END_SRC
*** Org-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC

*** Javascript/HTML/CSS
#+BEGIN_SRC emacs-lisp
;; Use skewer mode which allows real time preview
(add-hook 'js2-mode-hook 'skewer-mode)
(add-hook 'css-mode-hook 'skewer-css-mode)
(add-hook 'html-mode-hook 'skewer-html-mode)
;; use js2 mode for editing .js files
(add-to-list 'auto-mode-alist (cons (rx ".js" eos) 'js2-mode)) ;use js2 mode
#+END_SRC

*** Python
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC

* Other
#+BEGIN_SRC emacs-lisp
(defun do-on-startup ()
  "Stuff to do after the init file is loaded."
  (server-start)
  (neotree)
  (other-window 1)
  (split-window-horizontally))
(do-on-startup)
#+END_SRC

