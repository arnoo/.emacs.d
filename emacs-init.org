* Custom Variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(auto-indent-blank-lines-on-move nil)
 '(auto-save-interval 0)
 '(auto-save-timeout 10)
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(custom-safe-themes
   (quote
    ("cd540cb356cb169fa1493791bd4cbb183c5ad1c672b8d1be7b23e5e8c8178991" "bc40f613df8e0d8f31c5eb3380b61f587e1b5bc439212e03d4ea44b26b4f408a" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "c74e83f8aa4c78a121b52146eadb792c9facc5b1f02c917e3dbb454fca931223" "c5a044ba03d43a725bd79700087dea813abcb6beb6be08c7eb3303ed90782482" "6a37be365d1d95fad2f4d185e51928c789ef7a4ccf17e7ca13ad63a8bf5b922f" "756597b162f1be60a12dbd52bab71d40d6a2845a3e3c2584c6573ee9c332a66e" default)))
 '(electric-pair-mode t)
 '(inhibit-startup-screen t)
 '(menu-bar-mode nil)
 '(python-indent-guess-indent-offset nil)
 '(scroll-bar-mode nil)
 '(sml/position-percentage-format "")
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Ubuntu Mono" :foundry "unknown" :slant normal :weight normal :height 151 :width normal)))))
#+END_SRC
* Key Bindings
** Switch keys for better Dvorak compatibility
#+BEGIN_SRC emacs-lisp
(keyboard-translate ?\C-x ?\C-h)	;x for eXplain
(keyboard-translate ?\C-h ?\C-x)	;h for hang on, I have more input
(keyboard-translate ?\C-t ?\C-f)	;f for Flip two letters
(keyboard-translate ?\C-f ?\C-t)	;t for Toward the end of the line/file
(define-key key-translation-map (kbd "C-M-f") (kbd "C-M-t"))
(define-key key-translation-map (kbd "C-M-t") (kbd "C-M-f"))
(define-key key-translation-map (kbd "C-M-S-f") (kbd "C-M-S-t"))
(define-key key-translation-map (kbd "C-M-S-t") (kbd "C-M-S-f"))
(define-key key-translation-map (kbd "M-t") (kbd "M-f"))
(define-key key-translation-map (kbd "M-f") (kbd "M-t"))
(define-key key-translation-map (kbd "M-F") (kbd "M-T"))
(define-key key-translation-map (kbd "M-T") (kbd "M-F"))
#+END_SRC

** Global key bindings
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda () (local-set-key (kbd "C-,")
                                    (lambda () (interactive)
                                      (other-window -1)))))

(global-set-key (kbd "<f5>") (lambda () (interactive) (revert-buffer nil t)))
(global-set-key (kbd "M-p") 'backward-paragraph)
(global-set-key (kbd "M-n") 'forward-paragraph)

(global-set-key (kbd "C-,")
                (lambda () (interactive) (other-window -1)))
(global-set-key (kbd "C-.") 'other-window)
(global-set-key (kbd "C-u") 'undo)
(global-set-key (kbd "C-/") 'universal-argument)
(global-set-key (kbd "C-z") 'zap-to-char)
(global-set-key (kbd "C-x p") 'pop-to-mark-command)
(global-set-key (kbd "C-x s") 'eshell)
(global-set-key (kbd "C-x d") 'sr-speedbar-select-window)
(global-set-key (kbd "C-h x") 'helm-google-suggest)
(global-set-key (kbd "M-r") 'query-replace-regexp)
(global-set-key (kbd "C-M-r") 'replace-regexp)
(global-set-key (kbd "C-M-d") 'kill-sexp)
(global-set-key (kbd "C-x b") 'bookmark-jump)
(global-set-key (kbd "C-x w") 'eww)
(global-set-key (kbd "C-x m") 'man)
(global-set-key (kbd "C-'") 'semantic-ia-show-summary)
#+END_SRC

** Keybindings for external packages
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "M-s") 'avy-goto-word-1)
(global-set-key (kbd "C-r") 'ace-window)
(global-set-key (kbd "M-m") 'er/expand-region)
#+END_SRC

*** helm
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x C-b") 'helm-mini)
(global-set-key (kbd "C-x C-n") 'helm-mini)
(global-set-key (kbd "C-h a") 'helm-apropos)
#+END_SRC

*** corral
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-9") 'corral-parentheses-backward)
(global-set-key (kbd "M-0") 'corral-parentheses-forward)
(global-set-key (kbd "M-[") 'corral-brackets-backward)
(global-set-key (kbd "M-]") 'corral-brackets-forward)
(global-set-key (kbd "M-{") 'corral-braces-backward)
(global-set-key (kbd "M-}") 'corral-braces-forward)
(global-set-key (kbd "M-\"") 'corral-double-quotes-backward)
#+END_SRC

** Keybindings for custom defined functions
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-return>") 'open-next-line)
(global-set-key (kbd "M-RET") 'open-next-line)
(global-set-key (kbd "C-o") 'open-next-line) ;like vi o
(global-set-key (kbd "C-x C-r") 'find-file-sudo)
(global-set-key (kbd "M-o") 'open-previous-line) ;like vi O
#+END_SRC

* Settings
** Package Management
Load and activate packages before using them.
#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

Use melpa as the package repository.
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
#+END_SRC

** Appearance
*** Frame title
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook
          (lambda () (setq frame-title-format 'mode-line-format)))
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
(setq favorite-themes
      '(grandshell tronesque cyberpunk afternoon sanityinc-tomorrow-bright
                   deeper-blue material sanityinc-tomorrow-blue soothe))
  (load-theme 'lush t)
  ;; (set-cursor-color "white")
  (set-face-attribute 'vertical-border
                      nil
                      :foreground "#4d4d4d")
#+END_SRC

*** Fringes
#+BEGIN_SRC emacs-lisp
(fringe-mode '(2 . 0))
#+END_SRC

** Editor behavior
*** Autosave
Set autosave directory so that all the autosaves are in one place, and not all over the filesystem.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "/home/nivekuil/.emacs.d/backup")))
(setq auto-save-list-file-prefix "/home/nivekuil/.emacs.d/autosave/")
(setq auto-save-file-name-transforms
      `((".*" , "/home/nivekuil/.emacs.d/autosave/" t)))
#+END_SRC

*** Fill column
fill commands should create rows up to to 78 characters long.
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 78)
#+END_SRC

*** Scrolling
#+BEGIN_SRC emacs-lisp
;; Smooth scrolling
;; Note that scroll-conservatively does not work correctly with hl line mode
;; when at bottom of buffer
(setq scroll-margin 7
      scroll-conservatively 10000)
;; scroll amount
(setq mouse-wheel-scroll-amount '(1 ((shift) . 3) ((control) . 8)))
#+END_SRC

*** Yanking (pasting)
If we copy something from outside emacs, save it in the kill ring so it doesn't get lost after a kill.
#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC

*** Increase garbage collection memory threshold
By default Emacs GC'd every .76MB allocated, which is far too aggressive for a modern machine.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

*** Increase undo limit
#+BEGIN_SRC emacs-lisp
(setq undo-limit 800000)
(setq undo-strong-limit 1200000)
#+END_SRC

** Built-in minor modes
#+BEGIN_SRC emacs-lisp
;; Use subword mode in prog mode to move by camelCase.
(add-hook 'prog-mode-hook 'subword-mode)

;; use winner-mode (C-c left to undo window changes)
(winner-mode t)

;; use semantic
(semantic-mode t)

;; use hl line mode in dired and speedbar
(add-hook 'dired-mode-hook 'hl-line-mode)
(add-hook 'speedbar-mode-hook 'hl-line-mode)

;; use electric pair mode
(electric-pair-mode t)

;; use mouse avoidance mode
(setq mouse-avoidance-mode 'banish)

;; tab inserts spaces only
(setq-default indent-tabs-mode nil)

;; use auto-revert-mode for log files to update the output automatically
(add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-mode))
#+END_SRC

* Custom Functions
** Commands
*** change-theme
Changes the theme, disabling the current theme first.
#+BEGIN_SRC emacs-lisp
(defun change-theme ()
  ;;todo
  )
#+END_SRC
*** file-file-sudo
#+BEGIN_SRC emacs-lisp
(defun find-file-sudo ()
  "Reopen the current file as root user."
  (interactive)
  (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name)))
#+END_SRC

*** open-next-line
Behave like vi's o command
Binding: C-o, C-RET, M-RET
#+BEGIN_SRC emacs-lisp
(defun open-next-line ()
  "Open a new line after the current one."
  (interactive)
  (end-of-line) (open-line 1) (forward-line) (indent-according-to-mode))
#+END_SRC

*** open-previous-line
Behave like vi's O command
Binding: M-o
#+BEGIN_SRC emacs-lisp
(defun open-previous-line ()
  "Open a new line before the current one."
  (interactive)
  (beginning-of-line) (open-line 1) (indent-according-to-mode))
#+END_SRC

*** mark-this-line
Binding: M-m
#+BEGIN_SRC emacs-lisp
(defun mark-this-line ()
  "Mark the current line from indentation to end, leaving cursor at end."
  (interactive)
  (back-to-indentation) (set-mark-command nil) (end-of-line))
#+END_SRC

*** correct-exponent-formatting-in-region
#+BEGIN_SRC emacs-lisp
  (defun correct-exponent-formatting-in-region (start end)
    "Corrects formatting of exponents from copied text.
  When yanking formatted text, the formatting of exponents will be lost,
  appearing as regular numbers instead.  This function adds carets to properly
  denote that they are exponents, including exponents of parenthetical
  expressions.  This function assumes that the input variable is never an
  exponent itself."
    (interactive "*r")
    (save-excursion
      (save-restriction
        (let ((character (read-string "Enter variable to add carets around: ")))

          (narrow-to-region start end)
          (goto-char (point-min))
          (while (re-search-forward (concat "[" character ")]") nil t)
            (when (looking-at-p "[[:digit:]]") (insert "^")))))))
#+END_SRC
* Packages
** Ace window
#+BEGIN_SRC emacs-lisp
(setq aw-background t)
#+END_SRC

** Auto indent mode
#+BEGIN_SRC emacs-lisp
;; use auto indent mode
(auto-indent-global-mode t)
(add-to-list 'auto-indent-known-indent-level-variables 'js-indent-level)
(setq auto-indent-assign-indent-level 2)

#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
(setq avy-keys '(?a ?b ?c ?d ?e ?h ?i ?k ?m ?n ?o ?s ?t ?u))
(setq avy-style 'pre)
(setq avy-background t)
#+END_SRC

** Column enforce mode
Use column enforce mode to mark text past column 80.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'column-enforce-mode)
#+END_SRC

** Company mode
Use company mode for text and code completion.  There should be no delay  completion pop up.
#+BEGIN_SRC emacs-lisp
(global-company-mode)
(add-to-list 'company-backends 'company-anaconda)
(setq company-idle-delay 0.15)
#+END_SRC

The dabbrev backends should only look for candidates in buffers with the same major mode.
#+BEGIN_SRC emacs-lisp
(setq company-dabbrev-other-buffers t)
(setq company-dabbrev-code-other-buffers t)
#+END_SRC

Autocomplete should preserve the original case as much as possible.
#+Begin_SRC emacs-lisp
(setq company-dabbrev-downcase nil)
(setq company-dabbrev-ignore-case nil)
#+END_SRC

** Corral
#+BEGIN_SRC emacs-lisp
(setq corral-preserve-point nil)
(setq corral-syntax-entries '((?# "_")
                              (?* "_")
                              (?- "_")))
#+END_SRC
** Eww lnum
#+Begin_SRC emacs-lisp
(eval-after-load "eww"
  '(progn (define-key eww-mode-map "t" 'eww-lnum-follow)
          (define-key eww-mode-map "T" 'eww-lnum-universal)
          (define-key eww-mode-map "j" 'next-line)
          (define-key eww-mode-map "k" 'previous-line)))
#+END_SRC
** Flycheck
Use flycheck for syntax checking.
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-flycheck-mode) ;start with emacs
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
(helm-mode t)
#+END_SRC
*** Swap <tab> and C-z in helm buffers
#+BEGIN_SRC emacs-lisp
(define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
(define-key helm-map (kbd "C-z") 'helm-select-action)
#+END_SRC

*** Make helm buffers appear on the bottom half of the window
#+BEGIN_SRC emacs-lisp
(setq helm-split-window-in-side-p t)
(setq helm-split-window-default-side 'below)
#+END_SRC

*** Use fuzzy matching with helm-apropos
#+BEGIN_SRC emacs-lisp
(setq helm-apropos-fuzzy-match t)
#+END_SRC

** Helm swoop
Overwrite helm-swoop-split-window-function to use display-buffer so swoop plays nice with shackle.
#+BEGIN_SRC emacs-lisp
(setq helm-swoop-split-window-function
      (lambda ($buf)
        (display-buffer $buf)))

#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(setq magit-last-seen-setup-instructions "1.4.0")
#+END_SRC
** math-symbol-lists
#+BEGIN_SRC emacs-lisp
(require 'math-symbol-lists)
(quail-define-package "math" "UTF-8" "Ω" t)
(quail-define-rules ; whatever extra rules you want to define...
 ("\\from"    #X2190)
 ("\\to"      #X2192)
 ("\\lhd"     #X22B2)
 ("\\rhd"     #X22B3)
 ("\\unlhd"   #X22B4)
 ("\\unrhd"   #X22B5))
(mapc (lambda (x)
        (if (cddr x)
            (quail-defrule (cadr x) (car (cddr x)))))
      (append math-symbol-list-basic math-symbol-list-extended))
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Smart mode line
#+BEGIN_SRC emacs-lisp
;; Use smart mode line.
(sml/setup)
(setq rm-blacklist '(" ,"       ; Subword mode
                     " 80col"           ; Column enforce mode
                     " company" ; Company mode
                     " Helm"            ; Helm mode
                     " AI"              ; Auto indent mode
                     " MRev"            ; Magit auto revert mode
                     " yas"             ; Yasnippet
                     " WLR"             ; Whole line or region mode
                     " FlyC-"           ; Flycheck (no errors)
                     " Ind"             ; Org indent mode
                     " wb"              ; Ws butler
                     " ⛓"            ; Shackle
                     " Abbrev"))
#+END_SRC

** Shackle
Currently not doing anything.
#+BEGIN_SRC emacs-lisp
(shackle-mode t)
;;(setq shackle-rules
      ;;'(("*Help*" :align below :ratio 0.3)
        ;;("*helm.*?" :regexp t :align below :ratio 0.4)
;;        ))

#+END_SRC

** Swiper
Backspace should not end swiper.
#+BEGIN_SRC emacs-lisp
(setq ivy-on-del-error-function nil)
#+END_SRC

** Whole line or region
Use whole line or region so C-w and M-w without an active mark kills the line.
#+BEGIN_SRC emacs-lisp
(whole-line-or-region-mode t)
#+END_SRC

** Ws butler
Automatically and non-disruptively clean up whitespace on save.
#+BEGIN_SRC emacs-lisp
(ws-butler-global-mode t)
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
;; use yasnippet
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
(yas-global-mode t) ;; Activate global mode before defining keys
#+END_SRC

Yasnippet blocks shell tab completion, so disable it in comint and term modes.
#+BEGIN_SRC emacs-lisp
(add-hook 'comint-mode-hook (lambda () (yas-minor-mode -1)))
(add-hook 'term-mode-hook (lambda () (yas-minor-mode -1)))
#+END_SRC

** RPG mode
#+BEGIN_SRC emacs-lisp
;; use rpg-mode
;; (add-to-list 'load-path "/home/nivekuil/code/rpg-mode/")
;; (require 'rpg-mode)
;; (rpg-mode)
#+END_SRC

** sr-speedbar
#+BEGIN_SRC emacs-lisp
  (setq sr-speedbar-default-width 25)
  (setq sr-speedbar-right-side nil)
  (add-hook 'after-init-hook
            (lambda () (speedbar-set-timer 1)))

#+END_SRC
* Major Mode Settings
** Assembly
Configuration for SPARC assembly. Use ! as the comment char and only use tabs.
#+BEGIN_SRC emacs-lisp
(setq asm-comment-char 33)
(setq asm-mode-hook
      (lambda ()
        (setq indent-tabs-mode t)
        (add-hook 'before-save-hook
                  (lambda () (tabify (point-min) (point-max))) nil t)))
#+END_SRC

** Comint
#+BEGIN_SRC emacs-lisp
(add-hook 'comint-mode-hook (lambda ()
                              (set (make-local-variable 'scroll-margin) 0)))
(setq shell-file-name "bash")

(setq comint-prompt-read-only t)
#+END_SRC

** Eww
#+BEGIN_SRC emacs-lisp
(eval-after-load "eww"
  '(progn (define-key eww-mode-map "n" 'next-line)
          (define-key eww-mode-map "m" 'eww-follow-link)
          (define-key eww-mode-map "p" 'previous-line)
          (define-key eww-mode-map "N" 'eww-next-url)
          (define-key eww-mode-map "P" 'eww-previou1rs-url)))
#+END_SRC

** ERC
Autojoin channels in ERC
#+BEGIN_SRC emacs-lisp
(setq erc-autojoin-channels-alist
      '(("freenode.net" "#emacs" "#archlinux")))
#+END_SRC

** Help
#+BEGIN_SRC emacs-lisp
(add-hook 'help-mode-hook 'visual-line-mode)
#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)
(setq org-latex-create-formula-image-program 'imagemagick)
#+END_SRC

** Javascript/HTML/CSS
Use js2-minor-mode for editing .js files.
#+BEGIN_SRC emacs-lisp
(add-hook 'javascript-mode-hook 'js2-minor-mode)
;; Use skewer mode which allows real time preview
(add-hook 'javascript-mode-hook 'skewer-mode)
(add-hook 'css-mode-hook 'skewer-css-mode)
(add-hook 'html-mode-hook 'skewer-html-mode)
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC

** Term
Set scroll margin in terminal to 0.
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook (lambda ()
                            (set (make-local-variable 'scroll-margin) 0)))
#+END_SRC

* Other
#+BEGIN_SRC emacs-lisp
  (defun do-on-startup-graphical ()
    "Stuff to do after the init file is loaded."
    (sr-speedbar-open)
    (other-window 1)
    (split-window-horizontally)
    (server-start))

  (defun do-on-startup-terminal ()
    (split-window-horizontally))
  (if (display-graphic-p) (do-on-startup-graphical)
    (do-on-startup-terminal))
#+END_SRC
