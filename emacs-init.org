* Keybindings
** Switch keys for better Dvorak compatibility
#+BEGIN_SRC emacs-lisp
(define-key key-translation-map [?\C-h] [?\C-x]) ;x for eXplain
(define-key key-translation-map [?\C-x] [?\C-h]) ;h for hang on, I have more input
(define-key key-translation-map [?\C-t] [?\C-f]) ;f for Flip two letters
(define-key key-translation-map [?\C-f] [?\C-t]) ;t for Toward the end of the line/file
(define-key key-translation-map (kbd "C-M-h") (kbd "C-M-x"))
(define-key key-translation-map (kbd "C-M-f") (kbd "C-M-t"))
(define-key key-translation-map (kbd "C-M-t") (kbd "C-M-f"))
(define-key key-translation-map (kbd "C-M-S-f") (kbd "C-M-S-t"))
(define-key key-translation-map (kbd "C-M-S-t") (kbd "C-M-S-f"))
(define-key key-translation-map (kbd "M-t") (kbd "M-f"))
(define-key key-translation-map (kbd "M-f") (kbd "M-t"))
(define-key key-translation-map (kbd "M-F") (kbd "M-T"))
(define-key key-translation-map (kbd "M-T") (kbd "M-F"))
#+END_SRC

** Global key bindings
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda () (local-set-key (kbd "C-,")
                                    (lambda () (interactive)
                                      (other-window -1)))))

(global-set-key (kbd "<f5>") (lambda () (interactive) (revert-buffer nil t)))
(global-set-key (kbd "M-p") 'backward-paragraph)
(global-set-key (kbd "M-n") 'forward-paragraph)

(global-set-key (kbd "M-,")
                (lambda () (interactive) (other-window -1)))
(global-set-key (kbd "M-.") 'other-window)
(global-set-key (kbd "C-,")
                (lambda () (interactive) (other-window -1)))
(global-set-key (kbd "C-.") 'other-window)

(global-set-key (kbd "C-z") 'zap-to-char)
(global-set-key (kbd "C-x p") 'pop-to-mark-command)
(global-set-key (kbd "C-x b") 'helm-bookmarks)
(global-set-key (kbd "C-x w") 'eww)
(global-set-key (kbd "M-r") 'query-replace-regexp)
(global-set-key (kbd "C-M-r") 'replace-regexp)
(global-set-key (kbd "C-M-d") 'kill-sexp)
(global-set-key (kbd "C-h o") 'man)
#+END_SRC

Swap =undo= and =universal-argument=. =C-u= is in too good of a position to be wasted on =universal-argument=.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-u") 'undo)
(global-set-key (kbd "C-/") 'universal-argument)
#+END_SRC

** Keybindings for external packages
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x m") 'mu4e)
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-r") 'ace-window)
(global-set-key (kbd "M-m") 'er/expand-region)
(global-set-key (kbd "C-x f") 'anchored-transpose)
(global-set-key (kbd "C-M-s") 'helm-do-ag-project-root)
(global-set-key (kbd "C-;") 'whole-line-or-region-comment-dwim)

#+END_SRC

*** avy
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-s") 'avy-goto-subword-1)
(global-set-key (kbd "M-g M-g") 'avy-goto-line)
(global-set-key (kbd "M-g g") 'avy-goto-line)
#+END_SRC

*** deft
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x d") 'deft)
#+END_SRC

*** flycheck
#+BEGIN_SRC emacs-lisp
(add-hook 'flycheck-mode-hook
          (lambda ()
            (local-set-key (kbd "C-M-n") #'flycheck-next-error)
            (local-set-key (kbd "C-M-p") #'flycheck-previous-error)))
#+END_SRC

*** helm
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x C-b") 'helm-mini)
(global-set-key (kbd "C-x C-n") 'helm-mini)
(global-set-key (kbd "C-h a") 'helm-apropos)
(global-set-key (kbd "C-h x") 'helm-google-suggest)
#+END_SRC

*** corral
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-9") 'corral-parentheses-backward)
(global-set-key (kbd "M-0") 'corral-parentheses-forward)
(global-set-key (kbd "M-[") 'corral-brackets-backward)
(global-set-key (kbd "M-]") 'corral-brackets-forward)
(global-set-key (kbd "M-{") 'corral-braces-backward)
(global-set-key (kbd "M-}") 'corral-braces-forward)
(global-set-key (kbd "M-\"") 'corral-double-quotes-backward)
(global-set-key (kbd "M-'") 'corral-single-quotes-backward)
#+END_SRC

** Keybindings for custom defined functions
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-return>") 'open-next-line)
(global-set-key (kbd "M-RET") 'open-next-line)
(global-set-key (kbd "C-o") 'open-next-line) ;like vi o
(global-set-key (kbd "C-x C-r") 'find-file-sudo)
(global-set-key (kbd "M-o") 'open-previous-line) ;like vi O
(global-set-key (kbd "<f8>") 'run-async-script)
(global-set-key (kbd "C-a") 'beginning-of-line-or-indentation)
#+END_SRC

* General Settings
** Package Management
Use melpa as package repository.
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/"))
;;(add-to-list 'package-archives
;;             '("marmalade" . "https://marmalade-repo.org/packages/"))
#+END_SRC

Load and activate packages.
#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

Check if package-initialize did anything.  If nil, this is probably the first time starting emacs, so contact the package archives to refresh the package list.
#+BEGIN_SRC emacs-lisp
(unless package-activated-list (package-refresh-contents))
#+END_SRC

Regenerate any missing packages.
#+BEGIN_SRC emacs-lisp
(setq my-packages '(@ queue ace-window avy afternoon-theme aggressive-indent anchored-transpose atom-one-dark-theme auctex auto-complete popup avy beacon seq bubbleberry-theme cider seq spinner queue pkg-info epl clojure-mode clojure-mode color-theme-sanityinc-tomorrow column-enforce-mode s dash f pythonic company company-irony irony company company-jedi company-irony-c-headers corral cyberpunk-theme darktooth-theme deft draft-mode epc ctable concurrent deferred erc-hl-nicks expand-region find-file-in-project swiper firecode-theme flycheck-irony irony flycheck seq let-alist pkg-info epl dash flycheck-package flycheck seq let-alist pkg-info epl dash focus gnugo xpm ascii-art-to-unicode grandshell-theme haskell-mode helm-ag helm helm-core async popup async helm-projectile dash projectile pkg-info epl dash helm helm-core async popup async highlight-indentation htmlize hungry-delete irony jinja2-mode js2-mode json-rpc kerl let-alist load-theme-buffer-local lush-theme magit magit-popup dash async git-commit with-editor dash async dash with-editor dash async dash async magit-popup dash async material-theme minesweeper monokai-theme multi multiple-cursors names noctilux-theme paredit popup projectile pkg-info epl dash puml-mode py-autopep8 python-environment deferred pythonic pyvenv queue rainbow-delimiters request seq simple-httpd smart-mode-line rich-minority smyx-theme solarized-theme dash soothe-theme spacegray-theme spinner sr-speedbar string-utils list-utils stripe-buffer swiper symon temp-buffer-browse tronesque-theme ujelly-theme diminish bind-key web-mode whole-line-or-region with-editor dash async writegood-mode ws-butler xpm yaml-mode yasnippet zenburn-theme))

(mapc (lambda (package)
        (unless (package-installed-p package)
          (package-install package)))
      my-packages)
#+END_SRC

** Appearance
*** Cursor
#+BEGIN_SRC emacs-lisp
;;(set-cursor-color "white")
(blink-cursor-mode 0)
#+END_SRC

*** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Ubuntu Mono-15"))
#+END_SRC

*** Frame title
#+BEGIN_SRC emacs-lisp
(setq phrases `("conlidimus nostra ultra pensum"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook
          (lambda () (setq frame-title-format 'mode-line-format)))
#+END_SRC

*** Toolbars
#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
#+END_SRC

*** Mode line
Show column number in mode line.
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
#+END_SRC

*** Theme
#+BEGIN_SRC emacs-lisp
(setq favorite-themes
      '(grandshell tronesque cyberpunk afternoon sanityinc-tomorrow-bright
                   deeper-blue material sanityinc-tomorrow-blue soothe noctilux))

(setq solarized-scale-org-headlines nil)
(load-theme 'solarized-dark t)

#+END_SRC

**** Optional settings
#+BEGIN_SRC emacs-lisp
(set-face-background 'default "#111122")
(set-face-foreground 'default "#BCBCBC")
#+END_SRC

*** Fringes
#+BEGIN_SRC emacs-lisp
(fringe-mode '(4 . 0))
(scroll-bar-mode 0)
#+END_SRC

** Editor behavior
*** Autosave
Set autosave directory so that all the autosaves are in one place, and not all over the filesystem.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "/home/nivekuil/.emacs.d/backup")))
(setq auto-save-list-file-prefix "/home/nivekuil/.emacs.d/autosave/")
(setq auto-save-file-name-transforms
      `((".*" , "/home/nivekuil/.emacs.d/autosave/" t)))
#+END_SRC

Disable autosave based on number of characters typed.  Autosave after 10 seconds of idle.
#+BEGIN_SRC emacs-lisp
(setq auto-save-interval 0)
(setq auto-save-timeout 10)
#+END_SRC

*** Dired
When multiple dired buffers are open, dired should assume that file operations should be directed to the path in the other dired buffer.
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target nil)
#+END_SRC

*** Fill column
fill commands should create rows up to to 78 characters long.
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 78)
#+END_SRC

*** Scrolling
Make scrolling behave smoothly.  Note that scrolling does not work correctly with hl-line-mode after cursor goes to the bottom of the buffer.
#+BEGIN_SRC emacs-lisp
(setq scroll-margin 7
      scroll-conservatively 10000)
#+END_SRC

Change how many lines mouse wheel scrolls by - 1 line at a time with no modifiers.
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 3) ((control) . 8)))
#+END_SRC

*** Yanking (pasting)
If we copy something from outside emacs, save it in the kill ring so it doesn't get lost after a kill.
#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC

*** Increase garbage collection memory threshold
By default Emacs GC'd every .76MB allocated, which is far too aggressive for a modern machine.  Raise this to a much bigger number.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

*** Increase undo limit
#+BEGIN_SRC emacs-lisp
(setq undo-limit 800000)
(setq undo-strong-limit 1200000)
#+END_SRC

** Web browsing
Set the browse url function to something appropriate to the frame's environment (graphical or terminal).
#+BEGIN_SRC emacs-lisp
(add-to-list 'after-make-frame-functions
  (lambda (frame)
    (select-frame frame) ; why is this needed?
    (if (display-graphic-p)
        (setq browse-url-browser-function 'browse-url-xdg-open)
      (setq browse-url-browser-function 'eww-browse-url))))
#+END_SRC

* Custom Functions
** Commands
*** Run current buffer in interpreter asynchronously
#+BEGIN_SRC emacs-lisp
(defun run-async-script ()
  (interactive)
  (save-buffer)
  (cond ((equal (file-name-extension buffer-file-name) "py")
         (async-shell-command (concat "python " buffer-file-name)))))
#+END_SRC

*** file-file-sudo
#+BEGIN_SRC emacs-lisp
(defun find-file-sudo ()
  "Reopen the current file as root user."
  (interactive)
  (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name)))
#+END_SRC

*** open-next-line
Behave like vi's o command
Binding: C-o, C-RET, M-RET
#+BEGIN_SRC emacs-lisp
(defun open-next-line ()
  "Open a new line after the current one."
  (interactive)
  (end-of-line) (open-line 1) (forward-line) (indent-according-to-mode))
#+END_SRC

*** open-previous-line
Behave like vi's O command
Binding: M-o
#+BEGIN_SRC emacs-lisp
(defun open-previous-line ()
  "Open a new line before the current one."
  (interactive)
  (beginning-of-line) (open-line 1) (indent-according-to-mode))
#+END_SRC

*** mark-this-line
Binding: M-m
#+BEGIN_SRC emacs-lisp
(defun mark-this-line ()
  "Mark the current line from indentation to end, leaving cursor at end."
  (interactive)
  (back-to-indentation) (set-mark-command nil) (end-of-line))
#+END_SRC

*** correct-exponent-formatting-in-region
#+BEGIN_SRC emacs-lisp
(defun correct-exponent-formatting-in-region (start end)
  "Corrects formatting of exponents from copied text.
When yanking formatted text, the formatting of exponents will be lost,
appearing as regular numbers instead.  This function adds carets to properly
denote that they are exponents, including exponents of parenthetical
expressions.  This function assumes that the input variable is never an
exponent itself."
  (interactive "*r")
  (save-excursion
    (save-restriction
      (let ((character (read-string "Enter variable to add carets around: ")))
        (narrow-to-region start end)
        (goto-char (point-min))
        (while (re-search-forward (concat "[" character ")]") nil t)
          (when (looking-at-p "[[:digit:]]") (insert "^")))))))
#+END_SRC

*** beginning-of-line-or-indentation
Cycle cursor between the beginning of indentation and beginning of the line.
#+BEGIN_SRC emacs-lisp
(defun beginning-of-line-or-indentation ()
  (interactive)
  (let ((original (point)))
    (back-to-indentation)
    (if (eq (point) original)
        (beginning-of-line))))
#+END_SRC

*** spit-scad-last-expression
Using a clojure nrepl, scad-clj can interactively update a file to be read by an OpenSCAD session.
#+BEGIN_SRC emacs-lisp
(defun spit-scad-last-expression ()
  (interactive)
  (cider-interactive-eval
   (format
    "(require 'scad-clj.scad)
(spit \"repl.scad\" (scad-clj.scad/write-scad %s))"
   (cider-last-sexp))))

(add-hook 'clojure-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c c") 'spit-scad-last-expression)))
#+END_SRC

*** set-frame-width-80col
Make the current window 80 columns wide.
#+BEGIN_SRC emacs-lisp
(defun set-frame-width-80col (&optional cols)
  (interactive "p")
  (set-frame-width (selected-frame) (+ (* 81 cols) (- cols 1)))
 (set-frame-height (selected-frame) (x-display-pixel-height)))

#+END_SRC

*** TODO irc
TODO - encrypt ercpass file
#+BEGIN_SRC emacs-lisp
  (defun connect-to-irc ()
    (interactive)
    ;; (erc-tls :server "irc.freenode.net" :port 6697
    ;;          :nick "nivekuil"
    ;;          :password (with-temp-buffer
    ;;                      (insert-file-contents (concat user-emacs-directory "ercpass"))
    ;;                      (buffer-string)))
    (erc-tls :server "nivekuil.com" :port 7000
             :nick "nivekuil"
             :password (with-temp-buffer
                         (insert-file-contents
                          (concat user-emacs-directory "ercpass.txt"))
                         (buffer-string)))
    )
#+END_SRC

*** jump-to-last-edit
#+BEGIN_SRC emacs-lisp
(defun jump-to-last-edit ()
  "Go back to last add/delete edit"
  (interactive)
  (let* ((ubuf (cadr buffer-undo-list))
     (beg (car ubuf))
     (end (cdr ubuf)))
    (cond
     ((integerp beg) (goto-char beg))
     ((stringp beg) (goto-char (abs end))
      (message "DEL-> %s" (substring-no-properties beg)))
     (t (message "No add/delete edit occurred")))))

(global-set-key (kbd "C-x u") 'jump-to-last-edit)
#+END_SRC

* Mode settings
** Minor modes
#+BEGIN_SRC emacs-lisp
;; Use subword mode in prog mode to move by camelCase.
(add-hook 'prog-mode-hook 'subword-mode)

;; use winner-mode (C-c left to undo window changes)
(winner-mode t)

;; use hl line mode in dired
(add-hook 'dired-mode-hook 'hl-line-mode)

;; use electric pair mode
(electric-pair-mode t)

;; use mouse avoidance mode
(setq mouse-avoidance-mode 'banish)

;; tab inserts spaces only
(setq-default indent-tabs-mode nil)

;; use auto-revert-mode for log files to update the output automatically
(add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-mode))

#+END_SRC
*** recentf-mode
A useful feature that stores the most recently visited files, conveiniently accessible via =helm-mini=.
#+BEGIN_SRC emacs-lisp
(recentf-mode)
(setq recentf-max-saved-items 30)
(add-hook 'server-done-hook 'recentf-save-list)
(add-hook 'kill-emacs-hook 'recentf-save-list)
#+END_SRC

Ignore autoloaded files that clobber the recentf list after upgrading packages.
#+BEGIN_SRC emacs-lisp
(add-to-list 'recentf-exclude "*-autoloads.el")
#+END_SRC

** Major modes
*** Assembly
Configuration for SPARC assembly. Use ! as the comment char and only use tabs.
#+BEGIN_SRC emacs-lisp
(setq asm-comment-char ?!)
(setq asm-mode-hook
      (lambda ()
        (setq indent-tabs-mode t)
        (add-hook 'before-save-hook
                  (lambda () (tabify (point-min) (point-max))) nil t)))
#+END_SRC

*** C/C++ (cpp)
Use irony-mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
(setq irony-additional-clang-options '("-std=c++11"))
#+END_SRC

*** Comint
There should be no scroll margin in a shell buffer.
#+BEGIN_SRC emacs-lisp
(add-hook 'comint-mode-hook (lambda ()
                              (set (make-local-variable 'scroll-margin) 0)))
(setq shell-file-name "bash")
(setq comint-prompt-read-only t)
#+END_SRC

*** Eww
#+BEGIN_SRC emacs-lisp
(eval-after-load "eww"
  '(progn (define-key eww-mode-map "n" 'next-line)
          (define-key eww-mode-map "m" 'eww-follow-link)
          (define-key eww-mode-map "p" 'previous-line)
          (define-key eww-mode-map "N" 'eww-next-url)
          (define-key eww-mode-map "P" 'eww-previou1rs-url)))
#+END_SRC

*** ERC
   #+BEGIN_SRC emacs-lisp
   (require 'erc)
   #+END_SRC
Autojoin channels when ERC starts.
#+BEGIN_SRC emacs-lisp
  (setq erc-autojoin-channels-alist nil)
        '(("freenode.net" "#ucsd"))
#+END_SRC

Highlight nicknames.
#+BEGIN_SRC emacs-lisp
(add-to-list 'erc-modules 'hl-nicks)
#+END_SRC

Hide those annoying join/quit messages.
#+BEGIN_SRC emacs-lisp
(setq erc-hide-list '("JOIN" "PART" "QUIT"))
(setq erc-channel-hide-list '(("ucsd") nil))
#+END_SRC

No scroll margin in ERC buffers.
#+BEGIN_SRC emacs-lisp
(add-hook 'erc-mode-hook (lambda ()
                            (set (make-local-variable 'scroll-margin) 1)))
#+END_SRC

Show a notification when mentioned.  Works with libnotify, so I get pretty desktop notifications too.
#+BEGIN_SRC emacs-lisp
(add-to-list 'erc-modules 'notifications)
#+END_SRC

Since we're using ZNC, don't send PART messages when killing buffers.
#+BEGIN_SRC emacs-lisp
(defun erc-detach ()
  (erc-server-send (format "DETACH %s" (erc-default-target))
                   nil (erc-default-target)))

(setq erc-kill-buffer-hook #'(erc-detach))
(setq erc-kill-channel-hook #'(erc-detach))
(setq erc-kill-server-hook #'(erc-detach))
#+END_SRC

*** Haskell
#+BEGIN_SRC emacs-lisp
(require 'haskell-interactive-mode)
(require 'haskell-process)
(add-hook 'haskell-mode-hook
          (progn
              (interactive-haskell-mode)
              (turn-on-haskell-indent)))

(setq haskell-process-suggest-remove-import-lines t)
(setq haskell-process-auto-import-loaded-modules t)
(setq haskell-process-log t)

#+END_SRC

*** Help
#+BEGIN_SRC emacs-lisp
(add-hook 'help-mode-hook 'visual-line-mode)
#+END_SRC
*** LaTeX
Automatically compile on save.  There's probably a better way to do this than using the undocumented variable =TeX-command-force=.
#+BEGIN_SRC emacs-lisp
(setq TeX-command-force "LaTeX")
(add-hook 'LaTeX-mode-hook
          (lambda () (add-hook 'after-save-hook
                               (lambda () (TeX-command-master -1)) nil t)))
#+END_SRC
*** Org-mode
Use visual line mode to wrap lines in org mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC

Indent sections and hide multiple asterisks.
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

**** org-babel
Eval code blocks without prompting for confirmation.  It's unlikely that this will ever be a security concern.
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sh . t)
   (emacs-lisp . t)))
#+END_SRC

**** org-src
Editing source code blocks should happen in the same window.  The edit session should end after saving the org-src buffer (TODO: submit patch? after-save-hook isn't called by org-edit-src-save so might be better to modify org-edit-src-save itself).
#+BEGIN_SRC emacs-lisp
;;(setq org-src-window-setup 'current-window)
#+END_SRC

Don't indent the content of src blocks.
#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)
#+END_SRC

Disable syntax checking in src blocks.
#+BEGIN_SRC emacs-lisp
;;(add-hook 'org-src-mode-hook
;;          (lambda ()
;;            (add-to-list 'flycheck-disabled-checkers 'emacs-lisp-checkdoc)
;;            (column-enforce-mode 0)))
#+END_SRC

**** Macros
Add an "<el" expansion for emacs-lisp source blocks.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

**** Website
Org project settings for publishing my website, converting org files to html for jekyll.
#+BEGIN_SRC emacs-lisp
(setq org-html-doctype "html5")
(setq org-html-postamble "&copy; nivekuil %C <br> %c <br>
<a href=\"./index.org\">Source</a> | <a href=\"#\">Back to top</a>")
#+END_SRC

When exporting to HTML, highlight the code within src blocks.
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Workaround for a bug with HTML export on emacs-25. http://wenshanren.org/?p=768
#+BEGIN_SRC emacs-lisp
(eval-after-load "/home/nivekuil/docs/website/index.org"
  (defun org-font-lock-ensure ()
    (font-lock-fontify-buffer)))
#+END_SRC

Add more backends to =org-export=.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-export-backends 'org)
#+END_SRC

*** Javascript/HTML/CSS
Use js2-mode for editing .js files.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.jsx$" . js2-mode))
#+END_SRC

JSON is a subset of YAML, so use yaml-mode to edit json files.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.json$" . yaml-mode))
#+END_SRC

*** Python
Use jedi for completion.
#+BEGIN_SRC emacs-lisp
(defun my/python-mode-setup ()
  (add-to-list 'company-backends 'company-jedi)
  (local-set-key (kbd "C-c C-d") 'jedi:show-doc))

(add-hook 'python-mode-hook 'my/python-mode-setup)
#+END_SRC

*** Term
Set scroll margin in terminal to 0.
#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook (lambda ()
                            (set (make-local-variable 'scroll-margin) 0)))
#+END_SRC

*** Web
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.scss?\\'" . web-mode))
#+END_SRC

*** xwidget-webkit
Make the mouse wheel scroll the webkit xwidget, and add the standard keybinding to go back a page.
#+BEGIN_SRC emacs-lisp
(add-hook 'xwidget-webkit-mode-hook
      (lambda ()
        (setq-local mwheel-scroll-up-function
                    (lambda (&optional arg) (xwidget-webkit-scroll-up)))
        (setq-local mwheel-scroll-down-function
                    (lambda (&optional arg) (xwidget-webkit-scroll-down)))
        (local-set-key (kbd "M-<left>") #'xwidget-webkit-back)))
#+END_SRC
* Packages
** ace-window
Switch between windows by assigning a number to each one.
#+BEGIN_SRC emacs-lisp
(setq aw-background t)
#+END_SRC

** aggressive-indent-mode
Automatically fix indentation as you type.  Nice to have in lisp, but I find it more annoying than useful in other languages.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
(add-hook 'clojure-mode-hook #'aggressive-indent-mode)
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
(setq avy-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
(setq avy-style 'at-full)
(setq avy-background nil)
#+END_SRC

** beacon
Display a beacon when changing windows.
#+BEGIN_SRC emacs-lisp
(beacon-mode 1)
(setq beacon-blink-when-window-scrolls nil)
#+END_SRC

** column-enforce-mode
Use column enforce mode to mark text past column 80.
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook 'column-enforce-mode)
(add-hook 'c++-mode-hook 'column-enforce-mode)
(add-hook 'clojure-mode-hook 'column-enforce-mode)
(add-hook 'emacs-lisp-mode-hook 'column-enforce-mode)
(add-hook 'js-mode-hook 'column-enforce-mode)
(add-hook 'python-mode-hook 'column-enforce-mode)
#+END_SRC

** command-log-mode
** company-mode
Use company mode for text and code completion.
#+BEGIN_SRC emacs-lisp
(global-company-mode)
(add-to-list 'company-backends '(company-irony
                                 company-irony-c-headers))
(setq company-idle-delay 0.15)
#+END_SRC

The dabbrev backends should only look for candidates in buffers with the same major mode.
#+BEGIN_SRC emacs-lisp
(setq company-dabbrev-other-buffers t)
(setq company-dabbrev-code-other-buffers t)
#+END_SRC

Autocomplete should preserve the original case as much as possible.
#+BEGIN_SRC emacs-lisp
(setq company-dabbrev-downcase nil)
(setq company-dabbrev-ignore-case nil)
#+END_SRC

** corral
Best package ever!
#+BEGIN_SRC emacs-lisp
(setq corral-preserve-point t)
(setq corral-syntax-entries '((?# "_")
                              (?* "_")
                              (?- "_")))
#+END_SRC

** deft
#+BEGIN_SRC emacs-lisp
(setq deft-directory "/home/nivekuil/docs/deft/")
(setq deft-extension "org")
(setq deft-default-extension "org")
(setq deft-text-mode 'org-mode)
(setq deft-auto-save-interval 0)
(add-hook 'deft-mode-hook
          (lambda ()
            (setq-default deft-window-width (- (window-width) 2))))

#+END_SRC

Use hl-line-mode in the deft buffer.
#+BEGIN_SRC emacs-lisp
(add-hook 'deft-mode-hook (lambda () (hl-line-mode 1)))
#+END_SRC

** flycheck
Use flycheck for syntax checking.
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)

(add-hook 'flycheck-mode-hook #'flycheck-irony-setup);
(setq flycheck-display-errors-delay 0.4)

#+END_SRC

** helm
The following must be set before helm is loaded when tethered to my phone due to T-Mobile's DNS hijacking, or it will hang emacs.
#+BEGIN_SRC emacs-lisp
;;(setq tramp-ssh-controlmaster-options "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(helm-mode t)
#+END_SRC
Swap <tab> and C-z in helm buffers
#+BEGIN_SRC emacs-lisp
(define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
(define-key helm-map (kbd "C-z") 'helm-select-action)
#+END_SRC

Make helm buffers appear on the bottom half of the window.
#+BEGIN_SRC emacs-lisp
(setq helm-split-window-in-side-p t)
(setq helm-split-window-default-side 'below)
#+END_SRC

Use fuzzy matching with helm-apropos
#+BEGIN_SRC emacs-lisp
(setq helm-apropos-fuzzy-match t)
#+END_SRC

Show helm input within the helm window.
#+BEGIN_SRC emacs-lisp
(setq helm-echo-input-in-header-line t)
#+END_SRC

*** helm-web
#+BEGIN_SRC emacs-lisp
(setq helm-net-prefer-curl t)
#+END_SRC

** helm-ag
#+BEGIN_SRC emacs-lisp
(setq helm-ag-fuzzy-match t)
#+END_SRC

** hungry-delete-mode
Delete all whitespace instead of doing it one character at a time.
#+BEGIN_SRC emacs-lisp
(hungry-delete-mode 1)
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
(setq magit-last-seen-setup-instructions "1.4.0")
#+END_SRC

** mu4e
mu4e is not part of package.el, so we have to require it manually instead of letting package-initialize handle it.
#+BEGIN_SRC emacs-lisp
;;  (require 'mu4e)
  (setq mu4e-get-mail-command "offlineimap")
  (setq mu4e-headers-date-format "%b %d")
  (setq mu4e-headers-time-format "%I:%M %p")
  (setq mu4e-headers-fields '((:subject . 57)
                              (:from . 23)
                              (:human-date . 9)))
#+END_SRC

Update mailboxes every hour.
#+BEGIN_SRC emacs-lisp
(setq mu4e-update-interval 3600)
#+END_SRC

Use gmail as default mailbox.
#+BEGIN_SRC emacs-lisp
  (setq mu4e-maildir       "~/Maildir"   ;; top-level Maildir
        mu4e-sent-folder   "/zoho/Sent"       ;; folder for sent messages
        mu4e-drafts-folder "/zoho/Drafts"     ;; unfinished messages
        mu4e-trash-folder  "/zoho/Trash")      ;; trashed messages

#+END_SRC

Show images in emails.
#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-images t)
#+END_SRC

Gmail and offlineimap leads to duplicate emails showing up in search filters since that's the way labels/virtual folders in Gmail are represented, so skip them.
#+BEGIN_SRC emacs-lisp
(setq mu4e-headers-skip-duplicates t)
#+END_SRC

Use =mu4e-shr2text= found in the =mu4e-contrib= package to display rich text messages.
#+BEGIN_SRC emacs-lisp
;;(require 'mu4e-contrib)
(setq mu4e-html2text-command 'mu4e-shr2text)
#+END_SRC

Settings for sending mail using TLS encryption.  Use ~/.authinfo (or ~/.authinfo.gpg) for credentials.
#+BEGIN_SRC emacs-lisp
  (require 'smtpmail)
  (setq user-mail-address "kevin@nivekuil.com"
        send-mail-function 'smtpmail-send-it
        smtpmail-smtp-server "smtp.zoho.com"
        smtpmail-smtp-service 587)      ;TLS port
#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
(projectile-global-mode t)
#+END_SRC

Disable the projectile mode line, if only because it slows TRAMP to a crawl.
#+BEGIN_SRC emacs-lisp
(setq projectile-mode-line nil)
#+END_SRC

** puml-mode
#+BEGIN_SRC emacs-lisp
(setq puml-plantuml-jar-path (concat (expand-file-name user-emacs-directory) "util/plantuml.jar"))
#+END_SRC

** smart-mode-line
Use smart mode line, and don't display most minor mode lighters from the mode line.
#+BEGIN_SRC emacs-lisp
(sml/setup)
(sml/apply-theme 'respectful)
(setq rm-blacklist '(" ,"               ; Subword mode
                     " 80col"           ; Column enforce mode
                     " company"         ; Company mode
                     " Helm"            ; Helm mode
                     " AI"              ; Auto indent mode
                     " MRev"            ; Magit auto revert mode
                     " yas"             ; Yasnippet
                     " WLR"             ; Whole line or region mode
                     " FlyC-"           ; Flycheck (inactive)
                     " Ind"             ; Org indent mode
                     " wb"              ; Ws butler
                     " Abbrev"))
#+END_SRC

** swiper
Backspace should not end swiper.
#+BEGIN_SRC emacs-lisp
(setq ivy-on-del-error-function nil)
#+END_SRC

** symon
Mini system monitor that pops up in the minibuffer after a period of idleness.
#+BEGIN_SRC emacs-lisp
(setq symon-delay 30)
(setq symon-sparkline-width 48)
(setq symon-refresh-rate 2)
(symon-mode 1)
#+END_SRC

** rainbow-delimiters
Highlight parens levels in lisps.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
(add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** whole-line-or-region
Use whole line or region so C-w and M-w without an active mark kills the line.
#+BEGIN_SRC emacs-lisp
(whole-line-or-region-mode t)
#+END_SRC

** ws-butler
Automatically and non-disruptively clean up whitespace on save.
#+BEGIN_SRC emacs-lisp
(ws-butler-global-mode t)
#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp
;; use yasnippet
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
(yas-global-mode t) ;; Activate global mode before defining keys
#+END_SRC

Yasnippet blocks shell tab completion, so disable it in comint and term modes.
#+BEGIN_SRC emacs-lisp
(add-hook 'comint-mode-hook (lambda () (yas-minor-mode -1)))
(add-hook 'term-mode-hook (lambda () (yas-minor-mode -1)))
#+END_SRC

