* Custom Variables
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(auto-indent-blank-lines-on-move nil)
   '(auto-save-interval 0)
   '(auto-save-timeout 10)
   '(blink-cursor-mode nil)
   '(column-number-mode t)
   '(custom-safe-themes
     (quote
      ("cd540cb356cb169fa1493791bd4cbb183c5ad1c672b8d1be7b23e5e8c8178991" "bc40f613df8e0d8f31c5eb3380b61f587e1b5bc439212e03d4ea44b26b4f408a" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "c74e83f8aa4c78a121b52146eadb792c9facc5b1f02c917e3dbb454fca931223" "c5a044ba03d43a725bd79700087dea813abcb6beb6be08c7eb3303ed90782482" "6a37be365d1d95fad2f4d185e51928c789ef7a4ccf17e7ca13ad63a8bf5b922f" "756597b162f1be60a12dbd52bab71d40d6a2845a3e3c2584c6573ee9c332a66e" default)))
   '(electric-pair-mode t)
   '(fringe-mode 0 nil (fringe))
   '(inhibit-startup-screen t)
   '(menu-bar-mode nil)
   '(python-indent-guess-indent-offset nil)
   '(scroll-bar-mode nil)
   '(sml/position-percentage-format "")
   '(tool-bar-mode nil))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(default ((t (:family "Ubuntu Mono" :foundry "unknown" :slant normal :weight normal :height 151 :width normal)))))
#+END_SRC
* Key Bindings
** Switch keys for better Dvorak compatibility
#+BEGIN_SRC emacs-lisp
(keyboard-translate ?\C-x ?\C-h)        ;x for eXplain
(keyboard-translate ?\C-h ?\C-x)        ;h for hang on, I have more input
(keyboard-translate ?\C-t ?\C-f)        ;f for Flip two letters
(keyboard-translate ?\C-f ?\C-t)        ;t for Toward the end of the line/file
(define-key key-translation-map (kbd "C-M-f") (kbd "C-M-t"))
(define-key key-translation-map (kbd "C-M-t") (kbd "C-M-f"))
(define-key key-translation-map (kbd "C-M-S-f") (kbd "C-M-S-t"))
(define-key key-translation-map (kbd "C-M-S-t") (kbd "C-M-S-f"))
(define-key key-translation-map (kbd "M-t") (kbd "M-f"))
(define-key key-translation-map (kbd "M-f") (kbd "M-t"))
(define-key key-translation-map (kbd "M-F") (kbd "M-T"))
(define-key key-translation-map (kbd "M-T") (kbd "M-F"))
#+END_SRC

** Global key bindings
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda () (local-set-key (kbd "C-,")
                                    (lambda () (interactive) 
                                      (other-window -1)))))

(global-set-key (kbd "<f5>") (lambda () (interactive) (revert-buffer nil t)))
(global-set-key (kbd "M-p") 'beginning-of-defun)
(global-set-key (kbd "M-n") 'end-of-defun)
(global-set-key (kbd "M-m") 'mark-this-line)

(global-set-key (kbd "C-,") (lambda () (interactive) (other-window -1)))
(global-set-key (kbd "C-.") 'other-window)
(global-set-key (kbd "C-u") 'undo)
(global-set-key (kbd "C-/") 'universal-argument)
(global-set-key (kbd "C-z") 'zap-to-char)
(global-set-key (kbd "C-x p") 'pop-to-mark-command)
(global-set-key (kbd "C-x s") 'shell)
(global-set-key (kbd "C-h x") 'helm-google-suggest)
(global-set-key (kbd "M-s") 'query-replace)
(global-set-key (kbd "C-M-s") 'replace-regexp)
(global-set-key (kbd "C-x b") 'bookmark-jump)
(global-set-key (kbd "C-x w") 'eww)
#+END_SRC

** Keybindings for external packages
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x m") 'helm-emms)
  (global-set-key (kbd "M-r") 'ace-jump-word-mode)
  (global-set-key (kbd "C-x j") 'ace-jump-word-mode)
  (global-set-key (kbd "C-r") 'ace-window)
  (global-set-key (kbd "C-M-r") 'er/expand-region)
  ;; helm
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x C-b") 'helm-mini)
  (global-set-key (kbd "C-x C-n") 'helm-mini)
  (global-set-key (kbd "C-h a") 'helm-apropos)
#+END_SRC

** Keybindings for custom defined functions
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-RET") 'open-next-line)
  (global-set-key (kbd "C-o") 'open-next-line) ;like vi o
  (global-set-key (kbd "M-o") 'open-previous-line) ;like vi O
  (global-set-key (kbd "M-9") 'insert-parentheses-backward)
  (global-set-key (kbd "M-0") 'insert-parentheses-forward)
  (global-set-key (kbd "C-x C-r") 'find-file-root-user)
#+END_SRC

* Settings
** Package Management
#+BEGIN_SRC emacs-lisp
;; Load and activate packages before using them.
(package-initialize)

;; Use melpa package repository.
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
#+END_SRC
** Autosave
#+BEGIN_SRC emacs-lisp
  ;; Set autosave directory so emacs doesn't leave autosave files everywhere.
  (setq backup-directory-alist `(("." . "~/.emacs.d/backup"))
        auto-save-list-file-prefix "~/.emacs.d/autosave/"
        auto-save-file-name-transforms `((".*" , "~/.emacs.d/autosave/" t)))
#+END_SRC
** Appearance
#+BEGIN_SRC emacs-lisp
  ;; Set the theme.
  (setq favorite-themes
       '(grandshell tronesque cyberpunk afternoon sanityinc-tomorrow-bright  deeper-blue material sanityinc-tomorrow-blue soothe))
  (load-theme 'grandshell t)
  ;; (set-cursor-color "white")
  (set-face-attribute 'vertical-border 
                      nil 
                      :foreground "#333333")
#+END_SRC
** Editor behavior
*** Scrolling
#+BEGIN_SRC emacs-lisp
;; Smooth scrolling
;; Note that scroll-conservatively does not work correctly with hl line mode
;; when at bottom of buffer
(setq scroll-margin 7
      scroll-conservatively 10000)
;; scroll amount
(setq mouse-wheel-scroll-amount '(1 ((shift) . 3) ((control) . 8)))
#+END_SRC

*** Yanking (pasting)
#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC

** Built-in minor modes
#+BEGIN_SRC emacs-lisp
  ;; Use subword mode in prog mode to move by camelCase.
  (add-hook 'prog-mode-hook 'subword-mode)

  ;; use winner-mode (C-c left to undo window changes)
  (winner-mode 1)

  ;; use hl line mode in dired
  (add-hook 'dired-mode-hook 'hl-line-mode)

  ;; use electric pair mode
  (electric-pair-mode 1)

  ;; use mouse avoidance mode
  (setq mouse-avoidance-mode 'banish)

  ;; tab inserts spaces only
  (setq-default indent-tabs-mode nil)

  ;; use auto-revert-mode for log files to update the output automatically
  (add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-mode))
#+END_SRC
*** which-func-mode
#+BEGIN_SRC emacs-lisp
(which-func-mode 1)
#+END_SRC

* Custom Functions
** Commands
*** open-next-line
#+BEGIN_SRC emacs-lisp
  ;; Behave like vi's o command
  ;; Binding: C-o
  (defun open-next-line ()
    "Open a new line after the current one."
    (interactive)
    (end-of-line) (open-line 1) (forward-line) (indent-according-to-mode))
#+END_SRC

*** open-previous-line
#+BEGIN_SRC emacs-lisp
;; Behave like vi's O command
;; Binding: M-o
(defun open-previous-line ()
  "Open a new line before the current one."
  (interactive)
  (beginning-of-line) (open-line 1) (indent-according-to-mode))
#+END_SRC

*** mark-this-line
#+BEGIN_SRC emacs-lisp
  ;; Binding: M-m
  (defun mark-this-line ()
    "Mark the current line from indentation to end, leaving cursor at end."
    (interactive)
    (back-to-indentation) (set-mark-command nil) (end-of-line))
#+END_SRC

*** insert-parentheses-backward
#+BEGIN_SRC emacs-lisp
(defun insert-parentheses-backward ()
  "Insert parentheses around the sexp near point. Move parentheses backward by
        sexp if used repeatedly. Keycode 40 = (, 41 = )"
  (interactive)
  (cond ((string-match-p "\\\w" (char-to-string (char-after)))
         (forward-char) (insert-parentheses-backward))
        ((equal (char-before) 41)
         (backward-sexp) (insert-parentheses-backward))
        ((equal (char-after) 40)
         (if (equal (char-before) 40)
             (list (backward-char) (insert-parentheses 1))
           (delete-char 1) (backward-sexp) (insert-char 40) (backward-char)))
        ((equal (char-before) 40)
         (insert-parentheses 1) (backward-char))
        ((string-match-p "\\^_\W" (char-to-string (char-before)))
         (insert-parentheses 1) (backward-char))
        ((string-match-p "\\^_\W" (char-to-string (char-after)))
         (forward-char) (insert-parentheses 1) (backward-char))
        (t (backward-sexp) (insert-parentheses 1) (backward-char))))
#+END_SRC
*** insert-parentheses-forward
#+BEGIN_SRC emacs-lisp
(defun insert-parentheses-forward ()
  "Insert parentheses around the sexp around point. Move parentheses forward by
       sexp if used repeatedly. Keycode 40 = (, 41 = )"
  (interactive)
  (cond ((equal (char-before) 41)
         (if (equal (char-after) 41)
             (list (forward-char) (insert-parentheses-forward))
           (delete-char -1) (forward-sexp) (insert-char 41)))
        ((equal (char-after) 40)
         (forward-sexp) (insert-parentheses-forward))
        ((equal (char-before) 40)
         (insert-parentheses 1) (forward-sexp) (forward-char))
        ((string-match-p "\\^_\W" (char-to-string (char-before)))
         (insert-parentheses 1) (forward-sexp) (forward-char))
        ((string-match-p "\\^_\W" (char-to-string (char-after)))
         (backward-sexp) (insert-parentheses 1) (forward-sexp) (forward-char))
        (t (backward-sexp) (insert-parentheses 1)
           (forward-sexp) (forward-char))))
#+END_SRC
*** correct-exponent-formatting-in-region
#+BEGIN_SRC emacs-lisp
(defun correct-exponent-formatting-in-region (start end)
  "When yanking formatted text, the formatting of exponents will be lost,
    appearing as regular numbers instead. This function adds carets to properly
   denote that they are exponents, including exponents of parenthetical
    expressions. This function assumes that the input variable is never an
  exponent itself."
  (interactive "*r")
  (save-excursion
    (save-restriction
      (let ((character (read-string "Enter variable to add carets around: ")))
        (narrow-to-region start end)
        (goto-char (point-min))
        (while (re-search-forward (concat "[" character ")]") nil t)
          (when (looking-at-p "[[:digit:]]") (insert "^")))))))
#+END_SRC
** Advices
*** find-file
Automatically opens file as root user if necessary. Taken from http://emacsredux.com/blog/2013/04/21/edit-files-as-root/
#+BEGIN_SRC emacs-lisp
(defadvice find-file (after find-file-sudo activate)
  "Find file as root if necessary."
  (unless (and buffer-file-name
               (file-writable-p buffer-file-name))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC



* Packages
** Ace jump mode
** Ace window
#+BEGIN_SRC emacs-lisp
(setq aw-background nil)
#+END_SRC

** Auto indent mode
#+BEGIN_SRC emacs-lisp
;; use auto indent mode
(auto-indent-global-mode 1)
(setq auto-indent-assign-indent-level 2)
#+END_SRC

** Column enforce mode
#+BEGIN_SRC emacs-lisp

;; Use column enforce mode to mark text past column 80.
(add-hook 'prog-mode-hook 'column-enforce-mode)
#+END_SRC

** Company mode
Use company mode for text and code completion. There should be no delay  completion pop up.
#+BEGIN_SRC emacs-lisp
(global-company-mode)
(add-to-list 'company-backends 'company-anaconda)
(setq company-idle-delay 0)
#+END_SRC

The dabbrev backends should only look for candidates in buffers with the same major mode, and should not downcase candidates automatically.
#+BEGIN_SRC emacs-lisp
(setq company-dabbrev-other-buffers t)
(setq company-dabbrev-code-other-buffers t)
(setq company-dabbrev-downcase nil)
#+END_SRC

** Eww lnum
#+BEGIN_SRC emacs-lisp
(eval-after-load "eww"
  '(progn (define-key eww-mode-map "t" 'eww-lnum-follow)
          (define-key eww-mode-map "T" 'eww-lnum-universal)
          (define-key eww-mode-map "j" 'next-line)
          (define-key eww-mode-map "k" 'previous-line)))
#+END_SRC

** EMMS
#+BEGIN_SRC emacs-lisp
(emms-all)
(emms-default-players)
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
;; Use flycheck for syntax checking.
(add-hook 'after-init-hook 'global-flycheck-mode) ;start with emacs
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (helm-mode 1)
#+END_SRC
*** Swap <tab> and C-z in helm buffers
#+BEGIN_SRC emacs-lisp
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z") 'helm-select-action)
#+END_SRC
*** Make helm buffers appear on the bottom half of the window
#+BEGIN_SRC emacs-lisp
(setq helm-split-window-in-side-p t)
(setq helm-split-window-default-side 'below)
#+END_SRC
*** Use fuzzy matching with helm-apropos
#+BEGIN_SRC emacs-lisp
(setq helm-apropos-fuzzy-match t)
#+END_SRC
** Ivy (swiper)
#+BEGIN_SRC emacs-lisp
(setq ivy-on-del-error-function nil)
#+END_SRC

** Neotree
#+BEGIN_SRC emacs-lisp
(setq neo-keymap-style 'concise)
#+END_SRC

** Smart mode line
#+BEGIN_SRC emacs-lisp
;; Use smart mode line.
(sml/setup)
(sml/apply-theme 'respectful)
(setq rm-blacklist '(" ,"
                     " 80col"           ;hide lighters from mode-line
                     " company"
                     " FlyC-"
                     " Helm"
                     " AI"
                     " MRev"            ; magit auto-revert mode
                     " yas"
                     " WLR"
                     " Abbrev"))
#+END_SRC

** Whole line or region
#+BEGIN_SRC emacs-lisp
;; use whole line or region so C-w and M-w without selection deletes
;; the line. When yanking, it places it as a line
(whole-line-or-region-mode 1)
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
;; use yasnippet
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
(yas-global-mode 1) ;; Activate global mode before defining keys
(add-hook 'term-mode-hook (lambda () (setq yas-dont-activate t)))
#+END_SRC

** RPG mode
#+BEGIN_SRC emacs-lisp
;; use rpg-mode
;; (add-to-list 'load-path "/home/nivekuil/code/rpg-mode/")
;; (require 'rpg-mode)
;; (rpg-mode)
#+END_SRC
* Major Mode Settings
** Assembly
Use ! as the comment char for SPARC assembly and use tabs.
#+BEGIN_SRC emacs-lisp
(add-hook 'asm-mode-hook (lambda () (setq indent-tabs-mode t)))
(setq asm-comment-char 33)
#+END_SRC

** Comint (shell)
#+BEGIN_SRC emacs-lisp
(setq shell-file-name "bash")

(setq comint-prompt-read-only t)
#+END_SRC

** Eww
#+BEGIN_SRC emacs-lisp
(eval-after-load "eww"
  '(progn (define-key eww-mode-map "n" 'next-line)
          (define-key eww-mode-map "m" 'eww-follow-link)
          (define-key eww-mode-map "p" 'previous-line)
          (define-key eww-mode-map "N" 'eww-next-url)
          (define-key eww-mode-map "P" 'eww-previou1rs-url)))
#+END_SRC

** ERC
Autojoin channels in ERC
#+BEGIN_SRC emacs-lisp
(setq erc-autojoin-channels-alist
      '(("freenode.net" "#emacs" "#archlinux")))
#+END_SRC

** Help
#+BEGIN_SRC emacs-lisp
(add-hook 'help-mode-hook 'visual-line-mode)
#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)
(setq org-latex-create-formula-image-program 'imagemagick)
#+END_SRC

** Javascript/HTML/CSS
#+BEGIN_SRC emacs-lisp
;; use js2 mode for editing .js files
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
;; Use skewer mode which allows real time preview
(add-hook 'js2-mode-hook 'skewer-mode)
(add-hook 'css-mode-hook 'skewer-css-mode)
(add-hook 'html-mode-hook 'skewer-html-mode)
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC

* Other
#+BEGIN_SRC emacs-lisp
  (defun do-on-startup ()
    "Stuff to do after the init file is loaded."
    (neotree)
    (other-window 1)
    (split-window-horizontally)
    (setq frame-title-format 'mode-line-format)
    
    (server-start))
  (add-hook 'after-init-hook 'do-on-startup)
#+END_SRC

